  // self timer code
  // by Joaquín de Prada
  // based in lots of stuff, like blink without delay
  // has lots of debug messages


  // first I define what is considered a longPress and a shortPress
  
  // shortPress is when you want to take a "regular" picture
  // it needs to be timed for debounce purposes, that is, you need a "solid" press to take a picture
  const int shortPress = 200;
  //longPress is when you want to "something else", in my case delay the taking of the picture for x (10) seconds.
  //since 1000ms = 1 seconds, this is just a bit more than 1 second.
  const int  longPress = 1200;

  long LOOPresult;
  
void setup() {
  // put your setup code here, to run once:
  // this is for debug messages
    Serial.begin(9600) ;

}

void loop() {
  // put your main code here, to run repeatedly:
  // I try loop to be very simple and that looking at it you can understand what is happening
  
  LOOPresult = REDbutton(6);
            if ((LOOPresult > shortPress) && (LOOPresult < longPress)) {
            Serial.println("---------------------------");
            Serial.println ("CLICK");
            Serial.println("---------------------------");
            //blink (1000,10,5);
            } else if (LOOPresult > longPress) {
            blinkTest();
            Serial.println("---------------------------");
            Serial.println ("...CLICK");
            Serial.println("---------------------------");
            
            } 

}

void blinkTest() {
  // this is a test function to do the progressing blinking of the LED using my blink function
  // it last exactly 10 seconds (2500x4) and I could not accomplish this with the delay() 
  // everytime the led (in pin 5) blinks faster 1000, 700, 400, and 100.
unsigned long startTimer = millis();
Serial.println ("START 1000,2500,5");
blink (1000,2500,5);
;
Serial.println ("START 700,2500,5");
blink (700,2500,5);
;
Serial.println ("START 400,2500,5");
blink (400,2500,5);
;
Serial.println ("START 100,2500,5");
blink (100,2500,5);
;
Serial.println ("END");

unsigned long endTimer = millis();

unsigned long time = ((endTimer-startTimer)/1000);
;
Serial.println ("===========================");
Serial.print ("TIME:   ");
Serial.print(time);
Serial.println ("  seconds  ");
Serial.println ("===========================");

}
int blink (int interval, int timer, int ledPin)
// blink (blink interval=blinking speed, timer=duration blinking, ledPin=pin of LED)
// blink is a standalone function
{


int ledState = LOW;             // ledState used to set the LED
pinMode(ledPin, OUTPUT);
  
unsigned long previousMillis = 0;        // will store last time LED was updated

unsigned long currentMillisTimer = millis();
  
  while (millis() < (currentMillisTimer + timer)) 
  
  {
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }

    // set the LED with the ledState of the variable:
    digitalWrite(ledPin, ledState);
  }
  }
} //   END OF blink FUNCTION


int REDbutton(int button) {
    
    // REDbutton (button pin)
    // REDbutton is a standalone function
    // by Joaquín de Prada
  
// REDbutton variables  
static boolean buttonActive = false;
static unsigned long buttonTimer = 0;
static unsigned long STARTbuttonTimer = 0 ;
// END of REDbutton variables
    
    pinMode(button, INPUT);
 
    
int result= 0 ;

if (digitalRead(button) == LOW) {
            if (buttonActive == false) {
           Serial.println("button pressed");
            STARTbuttonTimer = millis(); 
            buttonActive = true ;
                                        }
     
     } else  {


      if (buttonActive == true) {
            buttonTimer = millis();
            Serial.println("button just released");
            Serial.print("pressed time inside function:  ");
            result = (buttonTimer - STARTbuttonTimer);
            Serial.println(result);
            buttonActive = false ;
     }
     }
                      return result;

     } // END OF REDbutton function
